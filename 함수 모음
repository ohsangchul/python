python에서는 주석 처리시 #를 사용한다.
  # 주석 입니다.

여러줄 주석시 ''' ~ '''를 사용한다
  '''
  여기는 주석 입니다.
  '''
  
*연산자를 이용해서 특정 문자열을 지정 횟수만큼 반복해서 출력 가능하다.
  print('abc' * 50) -> abcabcabcabc......

print() 함수로 출력시 줄 변경을 하기 싫으면 end 옵션을 사용한다.
  print('a', end = '')

출력 서식 : 정수(%d), 실수(%f), 문자열(%s)
서식 형식 : %[-][0][n][.m]서식문자
           n : 출력할 데이터의 전체 자리수
           - : 전체 자리수가 지정된 경우 데이터를 왼쪽에 맞춰 출력한다.
           0 : 왼쪽의 남는 자리에 0을 채워 출력한다.
          .m : 소수점 아래 표시할 자리수

서식을 지정해서 출력할 데이터가 2개 이상일 경우 데이터를 ()로 묶어야 한다.
  print('%d + %d = %d', (1, 2, 3))

나눗셈의 '몫'을 구할때는 //를 사용한다.
나눗셈의 '나머지'를 구할때는 %를 사용한다. (나눗셈 기호는 서식 형식으로도 사용되기 때문에 %를 출력하기 위해서는 %%로 표기한다.)
  print('%d / %d = %.2f' % (5, 3, 5/3))    # 5 / 3 = 1.67
  print('%d // %d = %.0f' % (5, 3, 5//3))  # 5 // 3 = 1
  print('%d %% %d = %.2f' % (5, 3, 5%3)    # 5 % 3 = 2.00

format() 함수와 출력 인덱스를 사용해서 출력하기
  print('{}       {}'.format('홍길동','활빈당'))  # 홍길동 활빈당
  print('{0}     {1}'.format('홍길동','활빈당'))  # 홍길동 활빈당
  print('{1}     {0}'.format('홍길동','활빈당'))  # 활빈당 홍길동
  print('{1} {0} {1}'.format('홍길동','활빈당'))  # 활빈당 홍길동 활빈당

출력 서식과 출력 인덱스를 모두 지정해서 출력하기 ({'인덱스:서식'}으로 작성하며, %는 생략한다.)
  print('{}님은           {}살 입니다.'.format('홍길동',20)) # 홍길동님은 20살 입니다.
  print('{0:10s}님은  {1:3d}살 입니다.'.format('홍길동',20)) # 홍길동       님은  20살 입니다.
  print('{0:10s}님은 {1:03d}살 입니다.'.format('홍길동',20)) # 홍길동       님은 020살 입니다.

문자열 정렬 하기
  print('{0:<10}   왼쪽 정렬'.format('Hi'))  # Hi         왼쪽 정렬
  print('{0:>10} 오른쪽 정렬'.format('Hi'))  #         Hi 오른쪽 정렬
  print('{0:^10} 가운데 정렬'.format('Hi'))  #     Hi     가운데 정렬

공백 채우기 (정렬 문자 앞에 공백을 채울 한개의 문자를 지정 할 수 있다.)
  print('{0:*<10}   왼쪽 정렬'.format('Hi'))  # Hi******** 왼쪽 정렬
  print('{0:*>10} 오른쪽 정렬'.format('Hi'))  # ********Hi 오른쪽 정렬
  print('{0:*^10} 가운데 정렬'.format('Hi'))  # ****Hi**** 가운데 정렬

f접두어를 사용한 포멧팅
  name = '홍길동'
  age = 35
  print(f'{name}님은 {age}살 입니다.')  # 홍길동님은 35살 입니다.

변수명 작성 방법
- 영문 대소문자, 숫자, 특수문자(_) 사용 가능
- 반드시 문자로 시작해야 하며, python 예약어는 사용할 수 없다.
- 변수의 자료형을 지정하지 않는다.
- 변수를 삭제 하려면 del 명령을 사용한다.

input() 함수는 데이터를 무조건 문자열로 입력받는다.
문자열로 입력받은 데이러를 숫자로 변환 할 때는 int() 또는 float()를 사용한다

split(구분자) : 문자열을 구분자를 경계로 나눈다.

map() 함수를 사용해서 입력받은 데이터를 일괄적으로 숫자로 변환시킬수 있다.
  a, b, c = map(int, input('3과목 점수를 입력하세요 : ').split(' '))

'변수 + 상수' 연산은 지원하지 않는다. 오류가 발생한다.

''나 ""로 묶어주면 문자열 데이터로 취급한다. ''와 ""를 구분하지 않는다.
  'test'와 "test" 모두 같은 문자열로 처리된다

''나 ""를 3개 사용하면 여러줄을 하나의 문자열로 표현할 수 있다.
'''는 여러줄 주석과 혼동이 있을 수 있으므로 """를 사용한다.
  msg = """이건
  모두
  하나다"""
  
인덱싱 : 문자열내 특정 위치의 문자를 얻어온다.

슬라이싱 : 문자열을 잘라낸다.
[start:end]로 구간을 지정하면 "시작위치 ~ 끝위치-1" 사이의 문자를 얻어온다.

문자열은 부분 수정을 할 수 없다.

len() : 인수로 지정된 문자열을 구성하는 문자의 개수를 얻어온다. (공백 포함, 영/한 구분 없이 문자 개수만 센다.)

count() : 인수로 지정된 문자 또는 문자열이 전체 문자열에서 출연한 횟수를 얻어온다.

find() : 인수로 지정된 문자 또는 문자열이 처음 나오는 위치를 리턴한다.

index() : 인수로 지정된 문자 또는 문자열이 처음 나오는 위치를 리턴한다.

join() : 문자 또는 문자열을 삽입한다.

upper() : 영어 문자열을 무조건 대문자로 변환한다.
lower() : 영어 문자열을 무조건 소문자로 변환한다.

lstrip() : 문자열 왼쪽의 불필요한 공백을 제거한다.
rstrip() : 문자열 오른쪽의 불필요한 공백을 제거한다.
strip() : 문자열 양쪽에 불필요한 공백을 제거한다.

replace() : 문자 또는 문자열을 치환한다.

split() : 문자열을 구분자를 경계로 나눈다. 나눈 결과는 list 타입니다. 기본값으로 공백이 사용된다.
          문자열을 단어 기준으로 파싱 할 때 활용 가능하다.

파이썬에서 공백 처리하는 방법
strip()
  print('   test   '.strip()) # 사용문자열 양쪽의 공백을 제거
  print('www.asw.pcom.comp.www'.strip('w.com')) # 지정된 문자를 기준으로 양쪽에서 제거
replace() : 모든 공백을 제거 하기
  print(' hello World '.replace(' ', '')) # 공백을 치환해서 제거
join() : 중복되는 공백문자(연속되는 2개 이상의 공백)를 1개만 나오게 하기
  print(' '.join('hello    World'.split())) # split()으로 문자열을 list로 만들어 join()으로 분리

list : 데이터를 []로 감싸주고 각각의 데이터는 ,로 구분한다.
  array = []  # 빈 리스트. 사용할때마다 필요한 만큼 자동으로 확장된다.
  num = [1, 2, 3] # 숫자 list
  string = ['one', 'two', 'three'] # 문자 list
  mix = [1, 2, 3, 'one', 'two', 'three'] # 숫자와 문자가 혼용된 list
  multi = [1, 2, 3, ['one', 'two', 'three']] # 데이터 요소로 list를 가지는 list

리스트 연산자로 +와 *만 사용 가능하다.
+는 두개의 리스트를 이어주고, *는 리스트를 반복한다.

리스트 수정
  num = [1, 2, 3, 4, 5]
  print(  type(num[2]))  # 인덱싱으로 뽑아내면 상수가 리턴된다.
  print(type(num[2:3]))  # 슬라이싱으로 뽑아내면 리스트가 리턴된다.
  num[2]   = ['a', 'b', 'c']  # 인덱싱으로 수정하면 데이터가 type를 유지하며 치환된다.
  num[2:3] = ['a', 'b', 'c']  # 슬라이싱으로 수정하면 데이터 value만 치환된다.

리스트 삭제
  num[1:4] = [] # 슬라이싱으로 삭제 할때는 []를 이용한다.
  del   num2[2] # 인덱싱으로 삭제 할때는 del을 사용한다.

append() : 리스트의 가장 마지막에 데이터를 추가한다.

insert() : 리스트의 특정 위치에 데이터를 삽입한다.

sort() : 리스트에 저장된 데이터를 오름차순으로 정렬한다.
  num.sort(reverse = True)  # 함수의 괄호안에 reverse = True 옵션을 지정하면 내림차순으로 정렬된다. 기본값은 False이다.

index() : 리스트에 저장된 데이터가 있을 경우 데이터의 위치를 리턴한다.

remove() : 리스트에 저장된 데이터에서 가장 먼저 나오는 데이터를 제거한다.

pop() : 리스트에 저장된 데이터를 리턴하고 그 데이터를 삭제한다.
  ret = num.pop( )  # 데이터 위치를 지정하지 않으면 리스트의 가장 마지막 데이터를 리턴한다.
  ret = num.pop(2) # 데이터 위치가 지정되면 지정된 위치의 데이터를 의미한다.

count() : 리스트에 포함된 특정 데이터의 개수를 얻어온다. 일치하는 데이터가 없으면 0을 리턴한다.

extend() : 리스트를 확장한다. 리스트에 리스트를 더한다.
