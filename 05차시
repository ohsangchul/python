[실습 내용 : 07_tuple.py]
### tuple은 list와 유사하나 ()로 둘러싸며, 수정 및 삭제가 불가능하다. 인덱싱과 슬라이싱 및 덧셈(이어 붙이기), 곱셈(반복)은 가능한다.

t1 = () # 빈 튜플
print(type(t1))
t2 = (1)
print(t2)
print(type(t2))
t3 = (1,) # 최소 2개 이상의 데이터가 있을 경우 사용하며, 1개의 데이터만 가지는 경우 반드시 ,를 찍어야 한다.
print(t3)
print(type(t3))
t4 = (1, 2, 3)
print(t4)
print(type(t4))
t5 = 1, 2, 3, 4, 5 # ()를 생략해도 변수 하나에 여러개의 데이터를 넣으면 튜플이 된다.
print(t5)
print(type(t5))
t6 = ('a', 'b', ('cd', 'ef')) # 튜플 내부에 다른 튜플을 포함 시킬수 있다.
print(t6)
print(type(t6))
#=================== RESTART: D:/osc/workspace/07_tuple.py ===================
#<class 'tuple'>
#1
#<class 'int'>
#(1,)
#<class 'tuple'>
#(1, 2, 3)
#<class 'tuple'>
#(1, 2, 3, 4, 5)
#<class 'tuple'>
#('a', 'b', ('cd', 'ef'))
#<class 'tuple'>

t7 = (1, 2, 'a', 'b')
print(t7)
print(t7[0])
print(t7[1:3])
#t7[0] = '가' # 에러 발생.
#del t7[0] # 에러 발생
#=================== RESTART: D:/osc/workspace/07_tuple.py ===================
#(1, 2, 'a', 'b')
#1
#(2, 'a')

print(t5 + t7)
print(t7 * 3)
print(len(t7))
#=================== RESTART: D:/osc/workspace/07_tuple.py ===================
#(1, 2, 3, 4, 5, 1, 2, 'a', 'b')
#(1, 2, 'a', 'b', 1, 2, 'a', 'b', 1, 2, 'a', 'b')
#4


[실습 내용 : 08_dictionary.py]
### dictionary : 대응 관계를 나타내는 자료형으로 key와 key에 할당되는 데이터(value)가 한쌍이 된다.
### {key : value, ...}와 같은 형태를 가지는 자료형이다.
### key : 일반적으로 string 타입의 데이터를 사용한다. (중복되는 key 사용시 마지막에 사용된 key의 value가 적용된다.)
### value : key에 저장할 데이터를 입력한다

dic = {} # 빈 딕셔너리
print(dic)
dic = {'이름' : '홍길동', '전화번호' : '010-111-2222', '나이' : 50}
print(dic)
print(type(dic))
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#{}
#{'이름': '홍길동', '전화번호': '010-111-2222', '나이': 50}
#<class 'dict'>

# 딕셔너리에 데이터 추가 및 수정하기 (나열 순서와 상관없이 key를 기준으로 하기 때문에 가장 마지막에 추가된다.)
dic['거주지'] = '서울' # '딕셔너리이름[key] = value' 로 사용하며, 딕셔너리에 존재하지 않는 key에 데이터를 넣어주면 추가되고, 존재하는 key에 데이터를 넣어주면 데이터가 수정된다.
print(dic)
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#{'이름': '홍길동', '전화번호': '010-111-2222', '나이': 50, '거주지': '서울'}

# 딕셔너리 데이터 삭제하기
del dic['전화번호'] # 'del 딕셔너리이름[key]' 로 사용한다.
print(dic)
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#{'이름': '홍길동', '나이': 50, '거주지': '서울'}

# 딕셔너리에 저장된 value 얻어오기 : '딕셔너리이름[key]' 또는 '딕셔너리이름.get(key)' 를 사용하며, key가 없는 경우 오류가 발생한다.
print(dic['나이'])
print(dic.get('나이'))
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#50
#50

### keys() : 딕셔너리에서 key 목록만 얻어온다.
print(dic.keys())
print(type(dic.keys()))
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#dict_keys(['이름', '나이', '거주지'])
#<class 'dict_keys'>

### values() : 딕셔너리에서 value 목록만 얻어온다.
print(dic.values())
print(type(dic.values()))
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#dict_values(['홍길동', 50, '서울'])
#<class 'dict_values'>

### items() : 딕셔너리에서 key와 value를 쌍으로 묶은 듀플을 얻어온다.
print(dic.items())
print(type(dic.items()))
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#dict_items([('이름', '홍길동'), ('나이', 50), ('거주지', '서울')])
#<class 'dict_items'>

### in 연산자 : 'key in 딕셔너리이름' 로 사용하며, in의 앞에 위치한 key가 딕셔너리에 존재하면 True, 존재하지 않으면 Flase를 리턴한다. 존재하지 않을때 'not in'을 사용하면 True를 리턴한다.
print('이름' in dic)
print('전화번호' in dic)
print('전화번호' not in dic)
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#True
#False
#True

### clear() : 딕셔너리의 모든 데이터를 삭제한다.
dic.clear()
print(dic) # clear한 딕셔너리를 출력
print(dic.clear()) # clear한 딕셔너리 값을 출력
#================= RESTART: D:/osc/workspace/08_dictionary.py =================
#{}
#None


[실습 내용 : 09_set.py]
### set은 집합과 비슷한 형태로 순서가 없기 때문에 어떤 값이 먼저 출력될지 알 수 없고, 중복되는 데이터를 허용하지 않는다.
### 딕셔너리와 동일하게 {}로 선언하지만, key가 존재하지 않고 value만 존재한다.

#list = []
#tuple = ()
#dict = {}
#set()

s1 = set() # 빈 set. 반드시 빈 set은 생성자로 만들어야 한다.
print(set())
print(type(set()))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#set()
#<class 'set'>

s2 = set([1, 2, 3, 4]) # set 생성자의 인수로 list를 사용한다.
print(s2)
print(type(s2))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 3, 4}
#<class 'set'>

s3 = {11, 5, 3, 3, 7, 3, 5, 7, 1} # 중복되는 값은 자동으로 제거된다.
print(s3)
print(type(s3))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 3, 5, 7}
#<class 'set'>

s4 = {'f', 'a', 'b', 'b', 'b', 'c', 'd', 'e', 'd', 'd', 'd'}
print(s4)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{'f', 'a', 'd', 'e', 'b', 'c'}

# in 연산자 사용
print('a' in s4)
print('h' in s4)
print('h' not in s4) # 데이터가 존재하지 않을때 True를 리턴받기 위해 사용한다.
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#True
#False
#True

### add() : set에 단일 데이터를 추가한다.
s4.add('가')
print(s4)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{'a', '가', 'f', 'b', 'c', 'e', 'd'}

### update() : set에 리스트를 이용해서 여러개의 데이터를 추가한다.
s4.update([1, 2, 3])
print(s4)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 'd', 3, '가', 'c', 'b', 'e', 'f', 'a'}

### remove() : set에 저장된 데이터를 제거한다. 제거할 데이터가 없을 경우 오류가 발생한다.
s4.remove('b')
print(s4)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 3, 'a', '가', 'd', 'f', 'e', 'c'}

### discard() : set에 저장된 데이터를 제거한다. 제거할 데이터가 없어도 오류가 발생하지 않는다.
s4.discard('d')
print(s4)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{'e', 1, 2, 3, 'f', '가', 'a', 'c'}

### copy() : set을 복사한다.
s5 = s4.copy()
print(s4)
print(s5)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 3, 'a', 'f', 'e', '가', 'c'}
#{1, 2, 3, 'a', 'f', 'e', '가', 'c'}

# 생성자를 사용해서 set을 복사하기
s6 = set(s4)
print(s4)
print(s6)
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 3, 'c', 'f', '가', 'e', 'a'}
#{1, 2, 3, 'c', 'f', '가', 'e', 'a'}

a = {1, 2, 3, 4, 5}
b = {3, 4, 5, 6, 7}

### 합집합 : |, union()
print(a | b)
print(a.union(b))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 3, 4, 5, 6, 7}
#{1, 2, 3, 4, 5, 6, 7}

### 교집합 : &, intersection()
print(a & b)
print(a.intersection(b))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{3, 4, 5}
#{3, 4, 5}

### 차집합 : -, difference() (모수에 따라 결과가 달라진다.)
print(a - b)
print(a.difference(b))
print(b - a)
print(b.difference(a))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2}
#{1, 2}
#{6, 7}
#{6, 7}

### 대칭 차집합(합집한- 교집합) : ^, symmetric_difference()
print(a ^ b)
print(a.symmetric_difference(b))
#==================== RESTART: D:/osc/workspace/09_set.py ====================
#{1, 2, 6, 7}
#{1, 2, 6, 7}


[실습 내용 : 10_LottoNumber_set.py]
import random as r
import time as t

# 로또 번호를 기억할 빈 set을 만든다.
lotto = set()

# 로또 번호를 뽑는다.
loop1 = 0
while True: # 무한 루프
     lotto.add(r.randrange(1,46))
     loop1 = loop1 + 1
     if len(lotto) == 6:
          break
print('loof1 : {}, lotto : {}'.format(loop1, lotto))

# 보너스 번호를 뽑는다.
loop2 = 0
while True: # 무한 루프
     bonus = r.randrange(1,46)
     loop2 = loop2 + 1
     if bonus not in lotto:
          break
print('loof2 : {}, lotto : {}, bonus : {}'.format(loop2, lotto, bonus))

# 결과물을 출력한다.
print('로또 번호 : ', end = '')
for i in lotto:
     print('%2d ' % i, end = '')
     t.sleep(1)
print('보너스 : %2d' % bonus)

# 로또 번호 정렬하기
lotto2 = []

for i in lotto:
    lotto2.append(i)

lotto2.sort()
print('오름차순 정렬 : {}+[{}]'.format(lotto2, bonus))
