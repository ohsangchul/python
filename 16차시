[실습 내용 : 24_dateTime.ipynb : 24_dateTime.py]
# 코드를 줄이기 위해 as를 사용해서 단축 키워드를 만들거나 from Module import * 로 정의된 함수명을 바로 사용 할 수 있다
#import datetime
#import datetime as dt
#from datetime import *
from datetime import datetime as dt

#now = datetime.datetime.now()
#now = dt.datetime.now()
#now = datetime.now()
now = dt.now()     # 컴퓨터 시스템의 날짜와 시간을 얻어온다.
print(type(now))   # <class 'datetime.datetime'>
print(now)
print(now.year)    # 년
print(now.month)   # 월
print(now.day)     # 일
print(now.minute)  # 분
print(now.second)  # 초
print(now.microsecond)  # 밀리초
print(now.weekday())    # 요일 (월:0 ~ 일:6)

# strftime('출력서식')
# %Y : 년도 4자리
# %y : 년도 2자리
# %m : 월(숫자)
# %h : 월(영어, 단축)
# %B : 월(영어, 전체)
# %d : 일
# %a : 요일(단축)
# %A : 요일(전체)
print(now.strftime('%Y-%m-%d'))  # 2019-07-11
print(now.strftime('%y-%m-%d'))  # 19-07-11
print(now.strftime('%y-%h-%d'))  # 19-Jul-11
print(now.strftime('%y-%B-%d'))  # 19-July-11
print(now.strftime('%y-%B-%d %a'))  # 19-July-11 Thu
print(now.strftime('%y-%B-%d %A'))  # 19-July-11 Thursday

# %H : 시(24시)
# %I : 시(12시)
# %M : 분
# %S : 초
# %p : AM/PM
print(now.strftime('%H:%M:%S'))     # 20:15:46
print(now.strftime('%p %I:%M:%S'))  # PM 08:15:46


[실습 내용 : 25_zigzag.ipynb : 25_zigzag.py]
data1 = [1*5 for loop in range(5)]     # [5, 5, 5, 5, 5]
print(data1)
data2 = [[1]*5 for loop in range(3)]   # [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]
print(data2)

# 2차원 배열을 이용해서 만들 결과물
#   1  2  3  4  5
#  10  9  8  7  6 
#  11 12 13 14 15 
#  20 19 18 17 16

# 4행 5열 2차원 리스트 만들기
data = [[0]*5 for loop in range(4)]
#print(data)
count  = 0  # 1씩 증가하며 2차원 배열을 채울 값
start  = 0  # list의 행에 숫자가 채워지기 시작할 열
end    = 4  # list의 행에 숫자가 채워지는 마지말 열
switch = 1  # start 부터 end 까지 증가치

for loop1 in range(4):
    #print(data[loop1])
    for loop2 in range(start, end+switch, switch):
        count += 1
        data[loop1][loop2] = count
    start, end = end, start
    switch *= -1

for view1 in range(4):
    for view2 in range(5):
        print('%3d' % data[view1][view2], end='')
    print()


[실습 내용 : 26_magicSquare.ipynb : 26_magicSquare.py]
while True:
    squareNum = int(input('마방진을 만들 숫자(홀수)를 입력하세요 : '))
    if squareNum % 2 == 0:
        print('홀수만 입력하세요')
    else:
        break
        
magicSquare = [[0]*squareNum for loop in range(squareNum)]

# 처음 숫자가 채워질 위치를 정한다. (첫 줄 가운데 열)
row = 0
column = squareNum//2

#마방진 생성
for num in range(1, squareNum*squareNum+1):
    magicSquare[row][column] = num
    # 방금 채운 숫자가 squareNum의 배수이면 다음 숫자는 아랫줄에 채우고 배수가 아니면 오른쪽 위 방향으로 채운다.
    if num % squareNum == 0:
        row += 1
    else:
        row -= 1
        # 행이 list의 범위를 벗어나면(-1이 되면) 마지막행(squareNum-1) 위치로 변경한다.
        if row < 0:
            row = squareNum-1
        column += 1
        # 열이 list의 범위를 벗어나면 첫번째열(0열)로 위치를 변경한다.
        if column > squareNum-1:
            column = 0

# 마방진 출력
for view1 in range(squareNum):
    for view2 in range(squareNum):
        print('%3d' % magicSquare[view1][view2], end='')
    print()
