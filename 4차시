[실습 내용 : 05_list.py]
# 리스트 연산자 : +와 *만 사용 가능하다.
# +는 두개의 리스트를 이어주고, *는 리스트를 반복한다.
num = [1, 2, 3]
num2 = [4, 5, 6]
print(num + num2)
print(num * 3)
print(str(num[0]) + 'str')
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 2, 3, 4, 5, 6]
#[1, 2, 3, 1, 2, 3, 1, 2, 3]
#1str

# 리스트의 수정
num = [1, 2, 3, 4, 5]
print(num[2])
print(type(num[2])) # 인덱싱으로 뽑아내면 상수가 리턴된다.
print(num[2:3])
print(type(num[2:3])) # 슬라이싱으로 뽑아내면 리스트가 리턴된다.
num[4] = 6
print(num)
num[2] = ['a', 'b', 'c'] # 인덱싱으로 수정하면 데이터가 type를 유지하며 치환된다.
print(num)
print(len(num))
print(num[1:4])
num[2:3] = ['a', 'b', 'c'] # 슬라이싱으로 수정하면 데이터 value만 치환된다.
print(num)
print(len(num))
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#3
#<class 'int'>
#[3]
#<class 'list'>
#[1, 2, 3, 4, 6]
#[1, 2, ['a', 'b', 'c'], 4, 6]
#5
#[2, ['a', 'b', 'c'], 4]
#[1, 2, 'a', 'b', 'c', 4, 6]
#7

# 리스트의 삭제
num = [1, 2, 3, 4, 5]
num2 = [1, 2, 3, 4, 5]
num[1:4] = [] # 슬라이싱으로 삭제 할때는 []를 이용한다.
print(num)
del num2[2] # 인덱싱으로 삭제 할때는 del을 사용한다.
print(num2)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 5]
#[1, 2, 4, 5]

### 리스트 함수
### append() : 리스트의 가장 마지막에 데이터를 추가한다.
num = [1, 2, 3]
num.append(5)
print(num)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 2, 3, 5]

### insert() : 리스트의 특정 위치에 데이터를 삽입한다.
num.insert(3, 4)
num.insert(0, 'Start')
num.insert(-1, 'End') # -로 지정된 인덱스 앞에 삽입된다.
print(num)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#['Start', 1, 2, 3, 4, 'End', 5]

### sort() : 리스트에 저장된 데이터를 오름차순으로 정렬한다.
num = [1, 3, 5, 7, 9, 2, 4, 6, 8]
num.sort()
print(num)
num.sort(reverse = True) # 함수의 괄호안에 reverse = True 옵션을 지정하면 내림차순으로 정렬된다. 기본값은 False이다.
print(num)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 2, 3, 4, 5, 6, 7, 8, 9]
#[9, 8, 7, 6, 5, 4, 3, 2, 1]

### index() : 리스트에 저장된 데이터가 있을 경우 데이터의 위치를 리턴한다.
num = [1, 2, 3]
print(num.index(3))
print(num.index(1))
#print(num.index(0)) # 에러 발생. 데이터가 없으면 에러가 발생한다.
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#2
#0

### remove() : 리스트에 저장된 데이터에서 가장 먼저 나오는 데이터를 제거한다.
num = [1, 1, 2, 2, 3, 3]
num.remove(2)
print(num)
num.remove(2)
print(num)
#num.remove(2) # 에러 발생. 데이터가 없으면 에러가 발생한다.
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 1, 2, 3, 3]
#[1, 1, 3, 3]

### pop() : 리스트에 저장된 데이터를 리턴하고 그 데이터를 삭제한다.
num = [1, 2, 3, 4, 5]
ret = num.pop() # 데이터 위치를 지정하지 않으면 리스트의 가장 마지막 데이터를 리턴한다.
print(ret, num)
ret = num.pop(2) # 데이터 위치가 지정되면 지정된 위치의 데이터를 의미한다.
print(ret, num)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#5 [1, 2, 3, 4]
#3 [1, 2, 4]

### count() : 리스트에 포함된 특정 데이터의 개수를 얻어온다. 일치하는 데이터가 없으면 0을 리턴한다.
num = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]
print(num.count(4))
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#4

### extend() : 리스트를 확장한다. 리스트에 리스트를 더한다.
num = [1, 2, 3]
num.extend([4,5])
print(num)
num += [6, 7]
print(num)
string = ['a', 'b', 'c']
string = string + ['d', 'e']
print(string)
#==================== RESTART: D:/osc/workspace/05_list.py ====================
#[1, 2, 3, 4, 5]
#[1, 2, 3, 4, 5, 6, 7]
#['a', 'b', 'c', 'd', 'e']

### 연산자의 우선순위
### () -> 단항연산자 -> 이항연산자 -> 삼항연산자 -> 대입연산자


[실습 내용 : 06_LottoNumber_list.py]
# random -> randrange() 함수를 사용하기 위해 모듈을 추가
import random as r # 이후 코드에서는 random을 r로 표기 하겠다.
# time -> sleep() 함수를 사용하기 위해 모듈을 추가
import time as t # 이후 코드에서는 time을 t로 표기 하겠다.

# 로또 추첨기를 준비한다.
# 로또 추첨기로 사용할 빈 리스트를 선언한다.
lotto = []

# 추첨기에 1~45의 공을 넣는다
for i in range(1, 46): # range(start:end) : "시작위치 ~ 끝위치-1"까지 증가한다. 기본 증가량은 '+1'이다.
     lotto.append(i) # i의 값을 리스트에 삽입

# 공이 잘 들어 갔는지 확인한다.
print('##### insert ball #####')
for i in range(0, 45):
     print('%02d ' % lotto[i], end = '') # 리스트의 인덱스 안에 있는 값을 출력
     if (i+1) % 15 == 0:
          print()
     
# 섞는다
# randrange(start, end) : "시작위치 ~ 끝위치-1" 사이의 무작위 수를 리턴한다. 반복 호출시 중복되는 값이 리턴 될수도 있다.
# lotto[0]와 lotto[1]~lotto[44] 사이의 값 중에서 핸덤한 위치의 값과 교환한다.
for i in range(0, 1000): # 많이 섞기 위해 횟수를 크게 한다.
     num = r.randrange(1, 45)
     lotto[0], lotto[num] = lotto[num], lotto[0]

# 공이 잘 섞였는지 확인한다.
print('##### mix ball #####')
for i in range(0, 45):
     print('%02d ' % lotto[i], end = '') # 리스트의 인덱스 안에 있는 값을 출력
     if (i+1) % 15 == 0:
          print()

# 6자리 번호를 출력한다.
print('##### pop-up ball #####')
print('추첨 번호 : ', end = '')
for i in range(0, 6):
     t.sleep(1) # sleep() : 인수로 지정된 시간만큼 프로그램을 잠깐 멈춘다. 단위는 '초'이다.
     print('%02d ' % lotto[i], end ='')
t.sleep(1)
print('보너스 : ', end = '')
t.sleep(1)
print('%02d' % lotto[6])
