[실습 내용 : 27_except.ipynb : 27_except.py]
# 프로그램이 동작할때 잘못 실행되는 것을 방지하기 위해 오류가 발생된다.
# try ~ except를 사용하면 오류가 발생 되었을때 별도의 처리를 하거나 무시하고 실행 할 수 있다.
# 오류가 발생될 것으로 예상되는 문장을 try 블록에 쓰고 해당 블록에 있는 코드가 실행중 오류가 발생하면 except 블록에 있는 코드가 실행된다.
'''
try:
    오류가 발생될 것으로 예상되는 문장
    ...
except [오류이름 [as 오류 변수]]:
    # except에 오류 이름을 쓰지 않으면 모든 오류에 대해서 except가 실행된다.
    # except에 오류 이름을 지정하면 해당 오류 발생시에만 except가 실행된다.
    # 오류가 발생하면 실행 할 문장
    # 오류 발생시 아무런 동작을 하지 않으려면 pass를 사용한다.    
    ...
finally:
    # 오류 발생 여부와 관계없이 무조건 실행되는 문장
    ...
'''

#print(4/0) # ZeroDivisionError: division by zero
try:
    print(4/0)
except ZeroDivisionError as e:
    print('나눗셈 모수로 0을 사용 할 수 없습니다.')
except:
    pass

data =[1,2,3]
#print(data[3]) # IndexError: list index out of range
try:
    print(data[3])
except IndexError:
    print('리스트의 인덱스가 맞지 않습니다.')
except:
    pass
finally:
    print('오류가 발생 여부와 상관없이 출력된 메시지 입니다.')


[실습 내용 : 28_class.ipynb : 27_class.py]
'''
class 클래스이름:
    # 생성자(constructor) : 클래스의 객체가 생성될때 자동으로 실행되는 메소드로 class의 멤버 변수를 초기화 한다.
    # 생성자는 __init__() 함수를 사용한다.
    def __init__(self, 인수, ...): # self는 필수. 인수가 사용되지 않으면 생략 가능하다.
        # 멤버 변수 : 변수 이름 앞에 self가 붙은 변수. 클래스 전체에서 사용 할 수 있다.
        # 지역 변수 : 변수 이름 앞에 self가 붙지 않는 변수. 선언된 멘소드 내부에서만 사용 할 수 있다.
        # 변수를 전역 변수로 지정해서 사용하기 위한 키워드를 정의하는 것으로 반드시 통일 되어야 한다.
        # 키워드는 시스템에서 정의된 함수 첫번째 인자로 설정한다.
        self.멤버변수 = 인수
    # 클랙스 객체에 저장된 데이터 출력에 사용되는 함수
    def __str__(self):
        return 출력할 내용(문자열)
'''

class firstClass: # firstClass start
    # self는 클래스 자신을 의미한다.
    def __init__(self):
        print('firstClass : 생성자는 클래스의 객체가 생성되는 순간 자동으로 실행 됩니다.')
        
    def __str__(self):
        return 'firstClass : 리턴되는 데이터는 __str__()에 정의 합니다.'
# firstClass end

class secondClass: # secondClass start
    # 인수를 받는 class에 객체 선언시 인수가 전달되지 않으면 오류가 발생한다.
    # 이럴때는 default 인수로 설정해서 값이 전달되지 않더라도 초기 값으로 동작하도록 한다.
    def __init__(self, data1=0, data2=0):
        self.data1 = data1; self.data2 = data2
        print('secondClass : 생성자는 클래스의 객체가 생성되는 순간 자동으로 실행 됩니다.')
        
    def __str__(self):
        return str(self.data1 + self.data2)
# secondClass end
        
class thirdClass: # thirdClass start
    def __init__(self, *num):
        self.data1 = 0; self.data2 = 0; self.data3 = 0
        if (len(num)) == 0:
            self.data1 = 0;
        elif (len(num)) == 1:
            self.data1 = num[0]
        elif (len(num)) == 2:
            self.data1 = num[0]; self.data2 = num[1]
        else:
            self.data1 = num[0]; self.data2 = num[1]; self.data3 = num[2]
        print('thirdClass : 생성자는 클래스의 객체가 생성되는 순간 자동으로 실행 됩니다.')
        
    def __str__(self):
        return str(self.data1 + self.data2 + self.data3)
# thirdClass end

# 객체이름 = 클래스이름([인수, ...])
'''
# __str__ 없을때
test1 = firstClass()
test2 = secondClass()
test2 = secondClass(1, 3)
test3 = thirdClass()
test3 = thirdClass(2)
test3 = thirdClass(2, 4)
test3 = thirdClass(2, 4, 6)
'''

# __str__() 있을때
print(firstClass())
print(secondClass())
print(secondClass(1, 3))
print(thirdClass())
print(thirdClass(2))
print(thirdClass(2, 4))
print(thirdClass(2, 4, 6))


[실습 내용 : 29_class_test.ipynb : 29_class_test.py]
class score:
    # score 클래스의 객체가 생성될때 이름과 3과목의 점수를 넘겨 받아 멤버 변수를 초기화 시킨다
    def __init__(self, name, data1, data2, data3):
        self.name = name
        self.data1 = data1
        self.data2 = data2
        self.data3 = data3
        self.total = data1 + data2 + data3
        self.avg = self.total / 3
    
    def __str__(self):
        return '이름:{}, 국어:{}, 영어:{}, 수학:{}, 총점:{}, 평균:{}'.format(self.name, self.data1, self.data2, self.data3, self.total, self.avg)

data = score('테스트', 100, 80, 90)
print(data)


[실습 내용 : 30_naver_realTime_searchWord.ipynb : 30_naver_realTime_searchWord.py]
# 크롤링(스크레핑, 파싱)에 사용할 라이브러리를 import 한다.
# pip install requests : 크롤링할 사이트에 접속해서 html 문서를 읽어온다.
# pip install beautifulsoup4 : requests를 사용해 읽어온 html 문서를 파싱한다.

import requests
from bs4 import BeautifulSoup

# 사이트에 접속해서 html 문서를 읽어온다
siteHtml = requests.get('https://www.naver.com/')
#print(naver) # <Response [200]> : 정상접속 응답 코드 확인

# 사이트의 모든 정보를 읽어오기 때문에 html 태그만 얻어온다.
htmlText = siteHtml.text
#print(html)

# Beautifulsoup 모듈의 Beautifulsoup() 함수를 사용해서 읽어온 html 문자를 파싱한다.
soup = BeautifulSoup(htmlText, 'html.parser')
#print(soup)

# 네이버 실시간 검색어는 class 속성이 ah_k인 span 태그에 들어있다.
# findAll('태그이름', ['속성이름':'속성값'])
word = soup.findAll('span', {'class':'ah_k'})
#print(word)

# 1~20위 실시간 검색 키워드만 출력한다.
num = 0
for naver in word[:20]:
    num += 1
    print('[{0:2d}위] {1}'.format(num,naver.text))
