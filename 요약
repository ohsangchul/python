python에서는 주석 처리시 #를 사용한다.
  # 주석 입니다.

여러줄 주석시 ''' ~ '''를 사용한다
  '''
  여기는 주석 입니다.
  '''

### print start ###
*연산자를 이용해서 특정 문자열을 지정 횟수만큼 반복해서 출력 가능하다.
  print('abc' * 50) -> abcabcabcabc......

print() 함수로 출력시 줄 변경을 하기 싫으면 end 옵션을 사용한다.
  print('a', end = '')

출력 서식 : 정수(%d), 실수(%f), 문자열(%s)
서식 형식 : %[-][0][n][.m]서식문자
           n : 출력할 데이터의 전체 자리수
           - : 전체 자리수가 지정된 경우 데이터를 왼쪽에 맞춰 출력한다.
           0 : 왼쪽의 남는 자리에 0을 채워 출력한다.
          .m : 소수점 아래 표시할 자리수

서식을 지정해서 출력할 데이터가 2개 이상일 경우 데이터를 ()로 묶어야 한다.
  print('%d + %d = %d', (1, 2, 3))

나눗셈의 '몫'을 구할때는 //를 사용한다.
나눗셈의 '나머지'를 구할때는 %를 사용한다. (나눗셈 기호는 서식 형식으로도 사용되기 때문에 %를 출력하기 위해서는 %%로 표기한다.)
  print('%d / %d = %.2f' % (5, 3, 5/3))    # 5 / 3 = 1.67
  print('%d // %d = %.0f' % (5, 3, 5//3))  # 5 // 3 = 1
  print('%d %% %d = %.2f' % (5, 3, 5%3)    # 5 % 3 = 2.00

format() 함수와 출력 인덱스를 사용해서 출력하기
  print('{}       {}'.format('홍길동','활빈당'))  # 홍길동 활빈당
  print('{0}     {1}'.format('홍길동','활빈당'))  # 홍길동 활빈당
  print('{1}     {0}'.format('홍길동','활빈당'))  # 활빈당 홍길동
  print('{1} {0} {1}'.format('홍길동','활빈당'))  # 활빈당 홍길동 활빈당

출력 서식과 출력 인덱스를 모두 지정해서 출력하기 ({'인덱스:서식'}으로 작성하며, %는 생략한다.)
  print('{}님은           {}살 입니다.'.format('홍길동',20))  # 홍길동님은 20살 입니다.
  print('{0:10s}님은  {1:3d}살 입니다.'.format('홍길동',20))  # 홍길동       님은  20살 입니다.
  print('{0:10s}님은 {1:03d}살 입니다.'.format('홍길동',20))  # 홍길동       님은 020살 입니다.

문자열 정렬 하기
  print('{0:<10}   왼쪽 정렬'.format('Hi'))  # Hi         왼쪽 정렬
  print('{0:>10} 오른쪽 정렬'.format('Hi'))  #         Hi 오른쪽 정렬
  print('{0:^10} 가운데 정렬'.format('Hi'))  #     Hi     가운데 정렬

공백 채우기 (정렬 문자 앞에 공백을 채울 한개의 문자를 지정 할 수 있다.)
  print('{0:*<10}   왼쪽 정렬'.format('Hi'))  # Hi******** 왼쪽 정렬
  print('{0:*>10} 오른쪽 정렬'.format('Hi'))  # ********Hi 오른쪽 정렬
  print('{0:*^10} 가운데 정렬'.format('Hi'))  # ****Hi**** 가운데 정렬

f접두어를 사용한 포멧팅
  name = '홍길동'
  age = 35
  print(f'{name}님은 {age}살 입니다.')  # 홍길동님은 35살 입니다.
### print end ###

변수명 작성 방법
- 영문 대소문자, 숫자, 특수문자(_) 사용 가능
- 반드시 문자로 시작해야 하며, python 예약어는 사용할 수 없다.
- 변수의 자료형을 지정하지 않는다.
- 변수를 삭제 하려면 del 명령을 사용한다.

### input start ###
input() 함수는 데이터를 무조건 문자열로 입력받는다.
문자열로 입력받은 데이러를 숫자로 변환 할 때는 int() 또는 float()를 사용한다

split(구분자) : 문자열을 구분자를 경계로 나눈다.

map() 함수를 사용해서 입력받은 데이터를 일괄적으로 숫자로 변환시킬수 있다.
  a, b, c = map(int, input('3과목 점수를 입력하세요 : ').split(' '))
### input end ###

'변수 + 상수' 연산은 지원하지 않는다. 오류가 발생한다.

''나 ""로 묶어주면 문자열 데이터로 취급한다. ''와 ""를 구분하지 않는다.
  'test'와 "test" 모두 같은 문자열로 처리된다

''나 ""를 3개 사용하면 여러줄을 하나의 문자열로 표현할 수 있다.
'''는 여러줄 주석과 혼동이 있을 수 있으므로 """를 사용한다.
  msg = """이건
  모두
  하나다"""
  
인덱싱 : 문자열내 특정 위치의 문자를 얻어온다.

슬라이싱 : 문자열을 잘라낸다. [start:end]로 구간을 지정하면 "시작위치 ~ 끝위치-1" 사이의 문자를 얻어온다.

문자열은 부분 수정을 할 수 없다.

len() : 인수로 지정된 문자열을 구성하는 문자의 개수를 얻어온다. (공백 포함, 영/한 구분 없이 문자 개수만 센다.)

count() : 인수로 지정된 문자 또는 문자열이 전체 문자열에서 출연한 횟수를 얻어온다.

find() : 인수로 지정된 문자 또는 문자열이 처음 나오는 위치를 리턴한다.

index() : 인수로 지정된 문자 또는 문자열이 처음 나오는 위치를 리턴한다.

join() : 문자 또는 문자열을 삽입한다.

upper() : 영어 문자열을 무조건 대문자로 변환한다.
lower() : 영어 문자열을 무조건 소문자로 변환한다.

lstrip() : 문자열 왼쪽의 불필요한 공백을 제거한다.
rstrip() : 문자열 오른쪽의 불필요한 공백을 제거한다.
strip()  : 문자열 양쪽에 불필요한 공백을 제거한다.

replace() : 문자 또는 문자열을 치환한다.

split() : 문자열을 구분자를 경계로 나눈다. 나눈 결과는 list 타입니다. 기본값으로 공백이 사용된다.
          문자열을 단어 기준으로 파싱 할 때 활용 가능하다.

파이썬에서 공백 처리하는 방법
strip()
  print('   test   '.strip(      ))  # 사용문자열 양쪽의 공백을 제거
  print('www.a.com'.strip('w.com'))  # 지정된 문자를 기준으로 양쪽에서 제거
replace() : 모든 공백을 제거 하기
  print(' hello World '.replace(' ', ''))  # 공백을 치환해서 제거
join() : 중복되는 공백문자(연속되는 2개 이상의 공백)를 1개만 나오게 하기
  print(' '.join('hello    World'.split()))  # split()으로 문자열을 list로 만들어 join()으로 분리

### list start ###
list : 데이터를 []로 감싸주고 각각의 데이터는 ,로 구분한다.
  array                                 = []  # 빈 리스트. 사용할때마다 필요한 만큼 자동으로 확장된다.
  num                            = [1, 2, 3]  # 숫자 list
  string           = ['one', 'two', 'three']  # 문자 list
  mix     = [1, 2, 3, 'one', 'two', 'three']  # 숫자와 문자가 혼용된 list
  multi = [1, 2, 3, ['one', 'two', 'three']]  # 데이터 요소로 list를 가지는 list

특정 개수, 값이 있는 리스트 생성 및 초기화 방법
  < 기본 >
  dice = [0, 0, 0, 0, 0, 0]
  < case1 > 특정 개수의 리스트를 동일한 값으로 초기화 하는 경우
  dice = [0 for count in range(6)]
  < case2 > 반복 횟수만큼 특정 값을 리스트에 추가
  dice = []
  for i in range(6):
       dice.append(0)

리스트 연산자로 +와 *만 사용 가능하다.
+는 두개의 리스트를 이어주고, *는 리스트를 반복한다.

리스트 수정
  num = [1, 2, 3, 4, 5]
  print(  type(num[2]))  # 인덱싱으로 뽑아내면 상수가 리턴된다.
  print(type(num[2:3]))  # 슬라이싱으로 뽑아내면 리스트가 리턴된다.
  num[2]   = ['a', 'b', 'c']  # 인덱싱으로 수정하면 데이터가 type를 유지하며 치환된다.
  num[2:3] = ['a', 'b', 'c']  # 슬라이싱으로 수정하면 데이터 value만 치환된다.

리스트 삭제
  num[1:4] = []  # 슬라이싱으로 삭제 할때는 []를 이용한다.
  del   num2[2]  # 인덱싱으로 삭제 할때는 del을 사용한다.

append() : 리스트의 가장 마지막에 데이터를 추가한다.

insert() : 리스트의 특정 위치에 데이터를 삽입한다.

sort() : 리스트에 저장된 데이터를 오름차순으로 정렬한다.
  num.sort(reverse = True)  # 함수의 괄호안에 reverse = True 옵션을 지정하면 내림차순으로 정렬된다. 기본값은 False이다.

index() : 리스트에 저장된 데이터가 있을 경우 데이터의 위치를 리턴한다.

remove() : 리스트에 저장된 데이터에서 가장 먼저 나오는 데이터를 제거한다.

pop() : 리스트에 저장된 데이터를 리턴하고 그 데이터를 삭제한다.
  ret = num.pop( )  # 데이터 위치를 지정하지 않으면 리스트의 가장 마지막 데이터를 리턴한다.
  ret = num.pop(2)  # 데이터 위치가 지정되면 지정된 위치의 데이터를 의미한다.

count() : 리스트에 포함된 특정 데이터의 개수를 얻어온다. 일치하는 데이터가 없으면 0을 리턴한다.

extend() : 리스트를 확장한다. 리스트에 리스트를 더한다.
### list end ###

### tuple start ###
tuple은 list와 유사하나 ()로 둘러싸며, 수정 및 삭제가 불가능하다. 인덱싱과 슬라이싱 및 덧셈(이어 붙이기), 곱셈(반복)은 가능한다.
  t1 =                       ()  # 빈 튜플
  t3 =                     (1,)  # 최소 2개 이상의 데이터가 있을 경우 사용하며, 1개의 데이터만 가지는 경우 반드시 ,를 찍어야 한다.
  t5 =            1, 2, 3, 4, 5  # ()를 생략해도 변수 하나에 여러개의 데이터를 넣으면 튜플이 된다.
  t6 = ('a', 'b', ('cd', 'ef'))  # 튜플 내부에 다른 튜플을 포함 시킬수 있다.
### tuple end ###

### dictionary start ###
dictionary : 대응 관계를 나타내는 자료형으로 key와 key에 할당되는 데이터(value)가 한쌍이 된다.
{key : value, ...}와 같은 형태를 가지는 자료형이다.
key : 일반적으로 string 타입의 데이터를 사용한다. (중복되는 key 사용시 마지막에 사용된 key의 value가 적용된다.)
value : key에 저장할 데이터를 입력한다
  dic = {}  # 빈 딕셔너리

딕셔너리에 데이터 추가 및 수정하기 (나열 순서와 상관없이 key를 기준으로 하기 때문에 가장 마지막에 추가된다.)
  '딕셔너리이름[key] = value' 로 사용하며, 딕셔너리에 존재하지 않는 key에 데이터를 넣어주면 추가되고, 존재하는 key에 데이터를 넣어주면 데이터가 수정된다.

딕셔너리 데이터 삭제하기
  'del 딕셔너리이름[key]' 로 사용한다.

딕셔너리에 저장된 value 얻어오기
  '딕셔너리이름[key]' 또는 '딕셔너리이름.get(key)' 를 사용하며, key가 없는 경우 오류가 발생한다.

keys() : 딕셔너리에서 key 목록만 얻어온다.
  print(dic.keys())
  
values() : 딕셔너리에서 value 목록만 얻어온다.
  print(dic.values())
  
items() : 딕셔너리에서 key와 value를 쌍으로 묶은 듀플을 얻어온다.
  print(dic.items())
  
clear() : 딕셔너리의 모든 데이터를 삭제한다.
  dic.clear()
  
in 연산자 : 'key in 딕셔너리이름' 로 사용
in의 앞에 위치한 key가 딕셔너리에 존재하면 True를 리턴
  dic = {'이름': '홍길동', '나이': 50, '거주지': '서울'}
  print('이름' in dic)
in의 앞에 위치한 key가 딕셔너리에 존재하지 않으면 Flase를 리턴
  print('전화번호' in dic)
in의 앞에 위치한 key가 딕셔너리에 존재하지 않을때 'not in'을 사용하면 True를 리턴
  print('전화번호' not in dic)
### dictionary end ###

### set start ###
set은 집합과 비슷한 형태로 순서가 없기 때문에 어떤 값이 먼저 출력될지 알 수 없고, 중복되는 데이터를 허용하지 않는다.
딕셔너리와 동일하게 {}로 선언하지만, key가 존재하지 않고 value만 존재한다.
  s1 =                             set()  # 빈 set. 반드시 빈 set은 생성자로 만들어야 한다.
  s2 =                 set([1, 2, 3, 4])  # set 생성자의 인수로 list를 사용한다.
  s3 = set([11, 5, 3, 3, 7, 3, 5, 7, 1])  # 중복되는 값은 자동으로 제거된다.

add() : set에 단일 데이터를 추가한다.
  s4.add('가')

update() : set에 리스트를 이용해서 여러개의 데이터를 추가한다.
  s4.update([1, 2, 3])
  
remove() : set에 저장된 데이터를 제거한다. 제거할 데이터가 없을 경우 오류가 발생한다.
  s4.remove('b')
  
discard() : set에 저장된 데이터를 제거한다. 제거할 데이터가 없어도 오류가 발생하지 않는다.
  s4.discard('d')
  
copy() : set을 복사한다.
  s5 = s4.copy()
### set end ###

합집합 : |, union()
  print(a | b)
  print(a.union(b))
  
교집합 : &, intersection()
  print(a & b)
  print(a.intersection(b))

차집합 : -, difference() (모수에 따라 결과가 달라진다.)
  print(a - b)
  print(a.difference(b))
  print(b - a)
  print(b.difference(a))

대칭 차집합(합집한- 교집합) : ^, symmetric_difference()
  print(a ^ b)
  print(a.symmetric_difference(b))

### if start ###
if 조건식:
   조건식이 참일 경우 실행할 구문
   ...
elif 조건식:
   조건식이 참일 경우 실행할 구문
   ...
else:
   조건식이 거짓일 경우 실행할 구문
   ...

조건처리 또는 예외처리 진입시 아무런 내용이 없으면 오류가 발생한다. 이럴 경우 pass를 사용해서 아무런 처리 없이 진행 시킬수있다.
  if 조건식:
      pass
  else:
      pass

if문 조건을 비교해서 참이거나 거짓일때 실행할 구문이 각각 하나씩일 경우 3항 연산자를 사용해서 처리할 수 있다.
'조건이 참일 경우 실행할 구문' if '조건식' else '조건식이 거짓일 경우 실행할 구문'
  year += 1900 if sex <= 2 else 2000
### set end ###

연산 결과과 무조건 True 또는 False 인 연산자
1. 관계연산자
  >  : 크다, 초과
  >= : 크거나 같다, 이상
  <  : 작다, 미만
  <= : 작거나 같다, 이하
  == : 같다
!= : 같지 않다.
2. 논리연산자
  and : 논리곱, 두 조건이 모두 참일 경우에만 참, ~이고, ~이면서, ~중에서
  or  : 논리합, 두 조선중 한 개 이상 참일 경우에 참, ~또는, ~이거나
  not : 논리부정, True는 False로 False는 True로 처리한다.

윤년/평년 판별식 : 년도가 4로 나누어 떨어지고, 100으로 나누어 떨어지지 않거나, 400으로 나누어 떨어지면 윤년이다.
  year % 4 == 0 and year % 100 != 0 or year % 400 == 0
  또는 (year % 4 == 0 and year % 100 != 0) or year % 400 == 0

### while start ###
조건이 참인 동안 반복하다가 조건이 거짓이 되면 반복을 종료한다.
반복해야 하는 횟수를 알 수 없을때 사용한다.
while 조건식:
    조건식이 참일 경우 실행할 구문
    ...
    break # 반복을 중지한다.
### while end ###

유클리드 호제법 : 큰수를 작은수로 나눈 나머지가 0이 아니면 큰수에 작은수를 대입하고 작은수에 나머지를 대입해서 다시 나누기를 반복한다.
  최대공약수 : 큰수를 작은수로 나눈 나머지가 0일때 작은수
  최소공배수 : 처음 두 수를 곱해서 최대공약수로 나눈 값

한문장이 너무 길어서 여러 줄에 나누어 작성하고 싶을때 \를 사용한다
  print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
  print('aaaaaaaaaaaaaaa\
  aaaaaaaaaaaaaaaa')
한문장이 너무 짧아서 한줄에 여러 문장을 작성하고 싶을때 ;를 사용한다
  print('1')
  print('2')
  print('1'); print('2')

### for start ###
for 변수 in range()
   반복할 구문
   ...
range([초기치], 최종치, [증가치]) : "시작위치 ~ 끝위치-1" 까지 증가치 만큼 증가하는 숫자를 포함한 객체를 만들어 준다.
초기치(default:0)와 증가치(default:0)는 생략 가능하다.

for 변수 in (list, tuple, dictionary, set)
   반복할 구문
   ...
자료형의 0번째 값을 변수에 저장하고 구문을 시작한다.
수행이 끝나면 다음 값을 변수에 저장하고 반복한다.
마지막 값을 변수에 넣고 구문을 실행한후 반복을 종료한다.
### for end ###

randrange(start, end) : "시작위치 ~ 끝위치-1" 사이의 값을 랜덤하게 출력한다. 시작위치(default:0)는 생략 가능하다.
